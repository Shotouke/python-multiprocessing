__author__ = 'Xavier Domenech & Manuel Rojo'

import py_ecc.file_ecc
import os
import random
import multiprocessing
import logging
import array
from os import getpid


def worker(data):
    """
    This worker saves the block passed as parameter
    """
    multiprocessing.current_process().__setattr__('data',data)
    return data

def worker2(data):
    """
    This worker returns the block
    """
    return multiprocessing.current_process().__getattribute__('data')

def who_i_am(data):
    """
    The job of this worker is simply tell who it is ;-)
    """
    print "Hi! I'm {} and process {}. I'm processing {}!".format(multiprocessing.current_process().name, getpid(), data)


def fail_workers(pool, failures):
    """
    This function emulates failing nodes/processes by terminating the
    number of "failures" processes from the "pool".
    """
    if failures > pool._processes:
        raise Exception("You want to fail {} workers from a total of {}, but you can't!!".format(failures, pool._processes))

    ids = random.sample(range(pool._processes), failures)
    for i in ids:
        "emulating a worker fails via its terminate()"
        pool._pool[i].terminate()
        pool._pool[i].join()

    "after failing processes, we need to recover the amount of processes in the pool"
    pool._maintain_pool()


def choose_pieces(size, recover, prefix):
    """
    Method to select a random stack of pieces to reconstruct
    the original data.

    size => Number of processes (number of file parts).
    recover => Number of minimum parts to recover the original data.
    prefix => Name of the pieces to choose
    """
    pieces = []
    while (len(pieces) < recover):
        if(len(pieces)== 0):
            pieces.append(random.randint(0, size-1))
        posiblePiece = random.randint(0, size-1)
        valid = True
        for x in range(len(pieces)):
            if (pieces[x] == posiblePiece):
                valid = False
        if (valid):
            pieces.append(posiblePiece) # Random selection of pieces (Always minimum number of needed pieces)
    for i in range(len(pieces)):
        pieces[i] = prefix + '.p_' + str(pieces[i])
    return pieces


def test_reed_salomon(size, recover, testFile, decodedFile):
    """
    Method to do the test for the first part of the practical work
    here we can code the original into n pieces, and then we recover it.

    size => Number of processes (number of file parts).
    recover => Number of minimum parts to recover the original data.
    testFile => A reasonable size file for testing.
    decodedFile => Name of the output file after the recovery
    """
    print "### Running test_reed_salomon with {} processes".format(size)
    p = [multiprocessing.Pool(1) for i in range(size)]
    #p = multiprocessing.Pool(size)
    prefix = testFile + '_backup'
    names = py_ecc.file_ecc.EncodeFile(testFile,prefix,size,recover)

    #test_pool_who_i_am_uniform(size, names) # Assign a part of data to each process

    for i, datum in enumerate(names):
        p[i%size].apply(who_i_am, (datum,))

    for i, datum in enumerate(names):
        p[i%size].apply(worker, (datum,))


    decList = []
    recov=array.array('i',(0,)*recover)
    for i, datum in enumerate(recov):
        decList.append(p[i%size].apply(worker2, (datum,)))

    print "decList " + str(decList)

    py_ecc.file_ecc.DecodeFiles(decList,decodedFile) # Decode the file


    for pool in p:
        pool.terminate()
        pool.join()


    # Study
    fileSize = os.path.getsize(testFile) # File size
    print 'File size: ' + str(fileSize) + 'bits'

    pieceSize = os.path.getsize(prefix + '.p_' + str(0)) # Piece size
    print 'Piece size: ' + str(pieceSize) + 'bits'


def test_reed_salomon_elasticity(size, recover, fail, testFile, decodedFile):
    """
    Method to do the test for the second part of the practical work
    here we can distribute the pieces in different processes

    size => Number of processes (number of file parts).
    recover => Number of minimum parts to recover the original data.
    fail => Number of processes that we want fail
    testFile => A reasonable size file for testing.
    decodedFile => Name of the output file after the recovery
    """
    print "### Running test_reed_salomon_elasticity with {} processes".format(size)
    p = multiprocessing.Pool(size)
    prefix = testFile + '_backup'
    names = py_ecc.file_ecc.EncodeFile(testFile,prefix,size,recover)

    files = []  # Here we read the content of the files and save it in a new table call files
    for i in range(len(names)):
        with open(names[i], 'r') as file:
            files.append(file.read())
        file.close()
                # End of read files

    decList = []
    p.map(worker, files)    # We pass the read files to different processes
    print "Process: " + str(p._processes)
    #returnedData = p.map(worker, files)
    """returnedData = []
    for i in range(len(names)):
        decList.append(returnedData[i])
    print decList"""



    #py_ecc.file_ecc.DecodeFiles(decList,decodedFile) # Decode the file

    p.terminate()
    p.join()

    # Study
    fileSize = os.path.getsize(testFile) # File size
    print 'File size: ' + str(fileSize) + 'bits'

    pieceSize = os.path.getsize(prefix + '.p_' + str(0)) # Piece size
    print 'Piece size: ' + str(pieceSize) + 'bits'


if __name__ == "__main__":

    # First part of the practical work: Reed Salomon for storage

    test_reed_salomon(8, 2, 'tmp/testA1', 'tmp/testA1.r') # first test with erasure codes 8,2
    test_reed_salomon(8, 4, 'tmp/testA2', 'tmp/testA2.r') # second test with erasure codes 8,4
    test_reed_salomon(8, 7, 'tmp/testA3', 'tmp/testA3.r') # third test with erasure codes 8,7

    # Second part of the practical work: Elasticity and Reed Salomon

    #test_reed_salomon_elasticity(8, 7, 0, 'tmp/ls', 'tmp/ls.r') # first test with erasure codes with elasticity
